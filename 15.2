Explain the working and the differences between Maven, Gradle and SBT in detail.
    MAVEN:
        *Apache Maven is a software project management and comprehension tool. 
        *Maven can manage a project's build, reporting and documentation from a central piece of information based on
         the concept of Project Object ModeL(POM)
        *Maven provides developers a complete build lifecycle framework.
        *In case of multiple development teams environment, Maven can set-up the way to work as per standards in a very short time.
        *Maven addresses two aspects of building software: first, it describes how software is built, and second, it describes its dependencies.
        *POM stands for Project Object Model. It is fundamental Unit of Work in Maven. It is an XML file. 
         It always resides in the base directory of the project as pom.xml.
        *While executing a task or goal, Maven looks for the POM in the current directory. 
         It reads the POM, gets the needed configuration information, then executes the goal.
        *Maven dynamically downloads java libraries and Maven plug-ins from one or more repositories such as the Maven 2 Central Repository, 
         and stores them in a local cache. 
        *Maven can also be used to build and manage projects written in c#, Ruby, Scala, and other languages.
        *Maven is built using a plugin-based architecture that allows it to make use of any application controllable through standard input. 
        *This allows anyone to write plugins to interface with build tools (compilers, unit test tools, etc.) for any other language.
        
   GRADLE:
        *Gradle is an open source, advanced general purpose build management system. 
        *Built on ANT, Maven, and lvy repositories.
        *introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven for declaring the project configuration.
        *Gradle allows you to apply common design principles to your build. It gives you a perfect structure for build, so that you can design well-structured and easily maintained, comprehensible build.
        *Gradle Wrapper allows you to execute Gradle builds on machines where Gradle is not installed.
         This is useful for continuous integration of servers.
        *Gradle has two distinct phases: evaluation and execution. Basically, 
         during evaluation Gradle will look for and evaluate build scripts in the directories it is supposed to look.
        *The advanced features of gradle are parallel unit test execution,Dependency building,incremental build support,
         gradle demon etc.,
         
SBT:
        *sbt is a general purpose build tool written in Scala.
        *The features are Default project layouts,Built-in tasks,Plugin architecture,Declarative Dependency management,
         Code over Configuration: A DSL for build tool.
        *It isn't just a build tool, it also provides an interactive environment to work in.
        *You can use sbt in two modes : command-line mode and interactive mode.
        *In the command-line mode, you run sbt task from your machine terminal. Once the task successfully finishes then sbt exits.
        *SBT build configurations are less verbose than the equivalent POM files, and they are written in Scala code, 
         so you can express whatever you need to get build your project, for example triggering code generation. 
        *SBT console mode keeps scala resident, which really improves compile times on subsequent runs. 
         This is important for scala, which is quite slow as compared to java.
         
 
